{"version":3,"sources":["Piece.js","Board.js","Chess.js","serviceWorker.js","index.js"],"names":["Piece","hasMoved","this","color","type","new","p","Board","pieceAt","field","rows","isChecked","i","piece","console","error","findKing","move","from","to","canMove","pieceAtDestination","v","h","dh","Math","abs","dv","canRookMove","idx","dir","canBishopMove","vMulti","hMulti","adv","initialRow","pawnRow","Array","keys","map","initialState","board","_","Chess","props","onFieldSelected","setState","prevState","selectedField","state","currentColor","status","isSuccess","includes","pieceStyle","j","isPossibleMove","styles","selected","possible","cellStyle","cell1","cell2","View","style","container","row","key","e","TouchableOpacity","onPress","activeOpacity","Text","text","backgroundColor","width","textAlign","marginTop","React","Component","StyleSheet","create","flex","height","marginHorizontal","flexDirection","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2d174269.chunk.js","sourcesContent":["type PieceType = 'king' | 'queen' | 'rook' | 'bishop' | 'knight' | 'pawn';\nexport type ColorType = 'white' | 'black';\n\nexport default class Piece {\n  type: PieceType;\n  color: ColorType;\n  hasMoved = false;\n\n  static new = (color: ColorType, type: PieceType): Piece => {\n    const p = new Piece();\n    p.color = color;\n    p.type = type;\n\n    return p;\n  };\n\n  get text() {\n    switch (this.color) {\n      case 'white':\n        switch (this.type) {\n          case 'king':\n            return '♔';\n          case 'queen':\n            return '♕';\n          case 'rook':\n            return '♖';\n          case 'bishop':\n            return '♗';\n          case 'knight':\n            return '♘';\n          case 'pawn':\n            return '♙';\n        }\n        break;\n      case 'black':\n        switch (this.type) {\n          case 'king':\n            return '♚';\n          case 'queen':\n            return '♛';\n          case 'rook':\n            return '♜';\n          case 'bishop':\n            return '♝';\n          case 'knight':\n            return '♞';\n          case 'pawn':\n            return '♟';\n        }\n    }\n  }\n}\n","import Piece from './Piece';\nimport type {ColorType} from './Piece';\n\ntype BoardRow = Array<?Piece>;\n\ntype Field = [number, number];\ntype MoveResult = 'move' | 'captured' | 'promotion' | 'impossible' | 'own';\n\nexport default class Board {\n  rows: Array<BoardRow>;\n\n  constructor() {\n    this.rows = this.initialState();\n  }\n\n  pieceAt = (field: Field): Piece => {\n    return this.rows[field[0]][field[1]];\n  };\n\n  isChecked = (): boolean => {\n    //TODO\n    const findKing = (color: ColorType): Field => {\n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; i < 8; i++) {\n          const piece = this.pieceAt([i, j]);\n          if (piece?.type === 'king' && piece?.color === color) {\n            return [i, j];\n          }\n        }\n      }\n      console.error('No king, no fun');\n    };\n\n    findKing('black');\n  };\n\n  move = (from: Field, to: Field): MoveResult => {\n    const piece = this.pieceAt(from);\n\n    if (piece && this.canMove(piece, from, to)) {\n      const pieceAtDestination = this.pieceAt(to);\n\n      if (\n        pieceAtDestination != null &&\n        pieceAtDestination.color === piece.color\n      ) {\n        return 'impossible';\n      } else {\n        piece.hasMoved = true;\n        this.rows[to[0]][to[1]] = piece;\n        this.rows[from[0]][from[1]] = null;\n\n        if (piece.type === 'pawn' && (to[0] === 0 || to[0] === 7)) {\n          piece.type = 'queen';\n          return 'promotion';\n        }\n\n        return pieceAtDestination ? 'captured' : 'move';\n      }\n    } else if (this.pieceAt(to)?.color === piece.color) {\n      return 'own';\n    } else {\n      return 'impossible';\n    }\n  };\n\n  canMove = (piece: Piece, from: Field, to: Field): boolean => {\n    if (this.pieceAt(to)?.color === piece.color) {\n      return false;\n    }\n\n    const v = from[0] - to[0];\n    const h = from[1] - to[1];\n    const dh = Math.abs(h);\n    const dv = Math.abs(v);\n\n    const canRookMove = () => {\n      if (dh !== 0 && dv !== 0) {\n        return false;\n      }\n\n      const idx = dv > 0 ? 0 : 1;\n      const dir = (idx ? h : v) > 0 ? 1 : -1;\n      for (let i = from[idx] - dir; (i - to[idx]) * dir > 0; i -= dir) {\n        const field = dv > 0 ? [i, from[1]] : [from[0], i];\n        if (this.pieceAt(field)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    const canBishopMove = () => {\n      if (dh !== dv) {\n        return false;\n      }\n\n      const vMulti = v < 0 ? 1 : -1;\n      const hMulti = h < 0 ? 1 : -1;\n\n      for (let i = 1; i < dv; i++) {\n        const field = [from[0] + i * vMulti, from[1] + i * hMulti];\n        if (this.pieceAt(field)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    switch (piece.type) {\n      case 'king':\n        //TODO: add conditions for checks\n        return dh <= 1 && dv <= 1;\n      case 'queen':\n        return canRookMove() || canBishopMove();\n      case 'rook':\n        return canRookMove();\n      case 'bishop':\n        return canBishopMove();\n      case 'knight':\n        return (dh === 2 && dv === 1) || (dh === 1 && dv === 2);\n      case 'pawn':\n        const dir = piece.color === 'white' ? 1 : -1;\n        const adv = v * dir;\n        if (dh === 1 && adv === 1) {\n          return this.pieceAt(to) != null;\n        }\n\n        if (dh > 0) {\n          return false;\n        }\n\n        if (adv === 2 && !piece.hasMoved) {\n          if (this.pieceAt([from[0] - dir, from[1]])) {\n            return false;\n          }\n        } else if (adv !== 1) {\n          return false;\n        }\n        return this.pieceAt(to) == null;\n      default:\n        return false;\n    }\n  };\n\n  initialRow = (color: ColorType): BoardRow => {\n    return [\n      Piece.new(color, 'rook'),\n      Piece.new(color, 'knight'),\n      Piece.new(color, 'bishop'),\n      Piece.new(color, 'queen'),\n      Piece.new(color, 'king'),\n      Piece.new(color, 'bishop'),\n      Piece.new(color, 'knight'),\n      Piece.new(color, 'rook'),\n    ];\n  };\n\n  pawnRow = (color: ColorType): BoardRow => {\n    return [...Array(8).keys()].map((i) => Piece.new(color, 'pawn'));\n  };\n\n  initialState = (): Array<BoardRow> => {\n    const board = [...Array(8).keys()].map(() =>\n      [...Array(8).keys()].map((_) => null),\n    );\n\n    board[0] = this.initialRow('black');\n    board[1] = this.pawnRow('black');\n    board[6] = this.pawnRow('white');\n    board[7] = this.initialRow('white');\n\n    return board;\n  };\n}\n","import React from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity} from 'react-native';\nimport Board from './Board';\nimport type {ColorType} from './Piece';\n\ntype AppState = {\n  currentColor: ColorType,\n  selectedField: ?[number, number],\n};\n\nexport default class Chess extends React.Component<{}, AppState> {\n  board: Board = new Board();\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentColor: 'white',\n      selectedField: null,\n    };\n  }\n\n  onFieldSelected = (field: [number, number]) => {\n    this.setState((prevState: AppState) => {\n      if (!prevState.selectedField) {\n        if (\n          this.board.pieceAt(field) &&\n          this.board.pieceAt(field)?.color !== this.state.currentColor\n        ) {\n          return {\n            selectedField: prevState.selectedField,\n          };\n        }\n\n        return {\n          selectedField: this.board.pieceAt(field) ? field : null,\n        };\n      }\n\n      if (!this.board.pieceAt(prevState.selectedField)) {\n        return {\n          selectedField: field,\n        };\n      }\n\n      const status = this.board.move(prevState.selectedField, field);\n\n      const isSuccess = ['move', 'captured', 'promotion'].includes(status);\n      const nextField = isSuccess\n        ? null\n        : status === 'own'\n        ? field\n        : prevState.selectedField;\n\n      const nextColor = isSuccess\n        ? prevState.currentColor === 'white'\n          ? 'black'\n          : 'white'\n        : prevState.currentColor;\n\n      return {\n        selectedField: nextField,\n        currentColor: nextColor,\n      };\n    });\n  };\n\n  pieceStyle = (field: [number, number]): any => {\n    const [i, j] = field;\n    let isPossibleMove = false;\n    if (this.state.selectedField != null) {\n      const piece = this.board.pieceAt(this.state.selectedField);\n      if (piece != null) {\n        isPossibleMove = this.board.canMove(\n          piece,\n          this.state.selectedField,\n          field,\n        );\n      }\n    }\n\n    return [\n      styles.piece,\n      this.state.selectedField &&\n      i === this.state.selectedField[0] &&\n      j === this.state.selectedField[1]\n        ? styles.selected\n        : null,\n      isPossibleMove ? styles.possible : null,\n    ];\n  };\n\n  cellStyle = (field: [number, number]): any => {\n    return [(field[0] + field[1]) % 2 === 0 ? styles.cell1 : styles.cell2];\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.board.rows.map((row, i) => {\n          return (\n            <View key={i} style={styles.row}>\n              {row.map((e, j) => (\n                <TouchableOpacity\n                  key={j}\n                  onPress={() => this.onFieldSelected([i, j])}\n                  style={this.cellStyle([i, j])}\n                  activeOpacity={1}>\n                  <Text style={this.pieceStyle([i, j])}>{e?.text ?? ''}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          );\n        })}\n        <Text>Current move: {this.state.currentColor}</Text>\n        <Text\n          style={{\n            backgroundColor: 'orange',\n            width: 50,\n            textAlign: 'center',\n            marginTop: 8,\n          }}\n          onPress={() => {\n            this.board.rows = this.board.initialState();\n            this.setState({\n              selectedField: null,\n              currentColor: 'white',\n            });\n          }}>\n          Reset\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: 400,\n    height: 400,\n    backgroundColor: 'white',\n    marginHorizontal: 'auto',\n    marginTop: 60,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  piece: {\n    textAlign: 'center',\n    fontSize: 30,\n    width: 50,\n    height: 50,\n  },\n  cell1: {\n    width: 50,\n    height: 50,\n    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n  },\n  cell2: {\n    width: 50,\n    height: 50,\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n  },\n  selected: {\n    backgroundColor: 'rgba(255, 255, 0, 1)',\n  },\n\n  possible: {\n    backgroundColor: 'rgba(0, 255, 0, 0.5)',\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Chess\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}